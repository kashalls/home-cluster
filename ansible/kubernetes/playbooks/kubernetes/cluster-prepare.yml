---
- hosts:
    - master
    - worker
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "{{ timezone | default('Etc/UTC') }}"
    - name: Networking
      block:
        - name: Networking | Set hostname to inventory hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Networking | Update /etc/hosts to include inventory hostname
          ansible.builtin.blockinfile:
            path: /etc/hosts
            block: |
              127.0.1.1   {{ inventory_hostname }}
    - name: Packages
      block:
        - name: Packages | Add apt repositories
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
            update_cache: true
          loop: "{{ packages_repositories | default([]) }}"
        - name: Packages | Install common packages
          ansible.builtin.apt:
            name: "{{ packages_install | default([]) }}"
            install_recommends: false
        - name: Packages | Remove packages
          ansible.builtin.apt:
            name: "{{ packages_remove | default([]) }}"
            state: absent
            autoremove: true
    - name: Gather installed packages
      ansible.builtin.package_facts:
        manager: auto
    - name: Packages | Uninstall Snap
      block:
        - name: Packages | Uninstall Snap | Check if snap is installed
          ansible.builtin.debug:
            msg: "snapd is installed"
          register: snapd_check
        - name: Packages | Uninstall Snap | Remove snap packages
          ansible.builtin.command: snap remove {{ item }}
          loop: ["lxd", "core20", "snapd"]
          when: snapd_check.failed is defined
        - name: Packages | Uninstall Snap | Remove snap from packages
          ansible.builtin.apt:
            name: snapd
            state: absent
            autoremove: true
      when: "'snapd' in ansible_facts.packages"
    - name: User Configuration
      block:
        - name: User Configuration | Add user to sudoers
          ansible.builtin.copy:
            content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
            dest: "/etc/sudoers.d/{{ ansible_user }}_nopasswd"
            mode: 0440
        - name: User Configuration | Add additional SSH public keys
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ item }}"
          loop: "{{ public_ssh_keys | default([]) }}"
        - name: User Configuration | Set fish shell
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            shell: /usr/bin/fish
        - name: User Configuration | Silence the login prompt
          ansible.builtin.file:
            dest: "/home/{{ ansible_user }}/.hushlogin"
            state: touch
            owner: "{{ ansible_user }}"
            mode: 0775
            modification_time: preserve
            access_time: preserve
    - name: System Configuration (1)
      block:
        - name: System Configuration (1) | Disable ufw
          ansible.builtin.systemd:
            service: ufw.service
            enabled: false
            masked: true
            state: stopped
        - name: System Configuration (1) | Enable fstrim
          ansible.builtin.systemd:
            service: fstrim.timer
            enabled: true
        - name: System Configuration (1) | Disable cloud-init
          ansible.builtin.file:
            dest: /etc/cloud/cloud-init.disabled
            state: touch
            owner: root
            mode: 0775
            modification_time: preserve
            access_time: preserve
    - name: System Configuration (2)
      block:
        - name: System Configuration (2) | Enable kernel modules now
          community.general.modprobe:
            name: "{{ item }}"
            state: present
          loop: ["br_netfilter", "overlay", "rbd"]
        - name: System Configuration (2) | Enable kernel modules on boot
          ansible.builtin.copy:
            mode: 0644
            content: "{{ item }}"
            dest: "/etc/modules-load.d/{{ item }}.conf"
          loop: ["br_netfilter", "overlay", "rbd"]
        - name: System Configuration (2) | Set sysctls
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          with_dict: "{{ sysctl_config }}"
          vars:
            sysctl_config:
              net.ipv4.ip_forward: 1
              net.ipv4.conf.all.forwarding: 1
              net.ipv4.conf.all.rp_filter: 0
              net.ipv4.conf.default.rp_filter: 0
              net.ipv6.conf.all.forwarding: 1
              net.bridge.bridge-nf-call-iptables: 1
              net.bridge.bridge-nf-call-ip6tables: 1
              fs.inotify.max_user_watches: 524288
              fs.inotify.max_user_instances: 512
        - name: System Configuration (2) | Disable swap at runtime
          ansible.builtin.command: swapoff -a
          when: ansible_swaptotal_mb > 0
        - name: System Configuration (2) | Disable swap at boot
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration (2) | Disable mitigations
          ansible.builtin.replace:
            path: /etc/default/grub
            regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.key | regex_escape }}=).)*)(?:[" ]{{ item.key | regex_escape }}=\S+)?(.*")$'
            replace: '\1 {{ item.key }}={{ item.value }}\2'
          with_dict: "{{ grub_config }}"
          vars:
            grub_config:
              apparmor: "0"
              mitigations: "off"
          register: grub_status
        - name: System Configuration (2) | Reconfigure grub and initramfs
          ansible.builtin.command: update-grub
          when: grub_status.changed
      notify: Reboot

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
