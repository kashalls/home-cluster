---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
  PROMETHEUS_OPERATOR_VERSION: v0.75.2

tasks:
  bootstrap:
    desc: Bootstrap Flux into a Kubernetes cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Flux into the '{{.cluster}}' cluster ... continue?
    cmds:
      # Install Flux
      - kubectl --context {{.cluster}} apply --server-side --kustomize {{.BOOTSTRAP_DIR}}
      # Install secrets and configmaps
      - sops --decrypt {{.BOOTSTRAP_DIR}}/age-key.secret.sops.yaml | kubectl --context {{.cluster}} apply --server-side --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.secret.sops.yaml | kubectl --context {{.cluster}} apply --server-side --filename -
      # Install Flux Kustomization resources
      - kubectl --context {{.cluster}} apply --server-side --kustomize {{.KUBERNETES_DIR}}/{{.cluster}}/flux/config
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.ROOT_DIR}}/age.key
      - test -f {{.BOOTSTRAP_DIR}}/age-key.secret.sops.yaml
      - sops --decrypt {{.BOOTSTRAP_DIR}}/age-key.secret.sops.yaml
  apply:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        path: Path to the Flux Kustomization resource (required)
        ns: Namespace the Flux Kustomization exists in (default: flux-system)
    cmd: |
      flux --context {{.cluster}} build ks $(basename {{.path}}) \
          --namespace {{.ns}} \
          --kustomization-file {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}}/ks.yaml \
          --path {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}} \
          {{- if contains "not found" .ks }}--dry-run \{{ end }}
      | \
      kubectl --context {{.cluster}} apply --server-side \
          --field-manager=kustomize-controller -f -
    requires:
      vars: ["cluster", "path"]
    vars:
      ns: '{{.ns | default "flux-system"}}'
      ks:
        sh: flux --context {{.cluster}} --namespace {{.ns}} get kustomizations $(basename {{.path}}) 2>&1
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}}/ks.yaml

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    requires:
      vars: ["cluster"]
    cmds:
      - flux --context {{.cluster}} reconcile -n flux-system kustomization cluster --with-source

  hr-restart:
    desc: Restart all failed Helm Releases
    requires:
      vars: ["cluster"]
    cmds:
      - kubectl --context {{.cluster}} get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux --context {{.cluster}} suspend hr $0 -n $1'
      - kubectl --context {{.cluster}} get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux --context {{.cluster}} resume hr $0 -n $1'
