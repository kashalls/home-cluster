---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply-node:
    desc: Apply Talos config to a node [CLUSTER=main] [IP=required]
    dotenv: ["{{.CLUSTER_DIR}}/cluster.env"]
    cmds:
      - sops exec-file --input-type yaml --output-type yaml {{.CLUSTER_DIR}}/talos/{{.IP}}.secret.sops.yaml "minijinja-cli {}" | talosctl --insecure={{.INSECURE}} --context {{.CLUSTER}} --nodes {{.IP}} apply-config --mode={{.MODE}} --file /dev/stdin
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} health --wait-timeout=10m --server=false
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE: '{{.INSECURE | default "false"}}'
    requires:
      vars: [CLUSTER, IP]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talos/{{.IP}}.secret.sops.yaml
      - which minijinja-cli sops talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [CLUSTER=main] [IP=required]
    dotenv: ["{{.CLUSTER_DIR}}/cluster.env"]
    cmds:
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} upgrade --image="factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "true"}}-secureboot{{end}}/{{.TALOS_SCHEMATIC_ID}}:$TALOS_VERSION" --timeout=10m
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} health --wait-timeout=10m --server=false
    vars:
      TALOS_SCHEMATIC_ID:
        sh: talosctl --context {{.CLUSTER}} --nodes {{.IP}} get nodeannotationspecs --output json | jq --raw-output '.spec | select(.key == "extensions.talos.dev/schematic") | .value'
      TALOS_SECUREBOOT:
        sh: talosctl --context {{.CLUSTER}} --nodes {{.IP}} get securitystate --output=jsonpath='{.spec.secureBoot}'
    requires:
      vars: [CLUSTER, IP]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/$TALOS_VERSION
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - which jq kubectl talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole CLUSTER [CLUSTER=main] [VERSION=required]
    dotenv: ["{{.CLUSTER_DIR}}/cluster.env"]
    cmds:
      - talosctl --context {{.CLUSTER}} --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
      - talosctl --context {{.CLUSTER}} health --wait-timeout=10m --server=false

    vars:
      TALOS_CONTROLLER:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/$KUBERNETES_VERSION
      - talosctl --context {{.CLUSTER}} --nodes {{.TALOS_CONTROLLER}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [CLUSTER=main] [IP=required] [MODE=default]
    cmds:
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} reboot --mode={{.MODE}}
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} health --wait-timeout=10m --server=false

    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [CLUSTER, IP]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole CLUSTER [CLUSTER=main]
    prompt: Shutdown the Talos CLUSTER '{{.CLUSTER}}' ... continue?
    cmd: talosctl --context {{.CLUSTER}} shutdown --nodes {{.IP_ADDRS}} --force
    vars:
      IP_ADDRS:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.NODES}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [CLUSTER=main] [IP=required]
    prompt: Reset Talos node '{{.IP}}' on the '{{.CLUSTER}}' CLUSTER ... continue?
    cmd: talosctl --context {{.CLUSTER}} reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [CLUSTER, IP]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.IP}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole CLUSTER [CLUSTER=main]
    prompt: Reset the Talos CLUSTER '{{.CLUSTER}}' ... continue?
    cmd: talosctl --context {{.CLUSTER}} reset --nodes {{.IP_ADDRS}} --graceful=false
    vars:
      IP_ADDRS:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.NODES}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - which jq talosctl

  kubeconfig:
    desc: Generate the kubeconfig for a Talos CLUSTER [CLUSTER=main]
    cmd: talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info
      - which jq talosctl

  apply-cluster:
    desc: Apply Talos config across the whole CLUSTER [CLUSTER=main] [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: apply-node
        vars:
          IP: "{{.ITEM}}"
          MODE: "{{.MODE}}"
          CLUSTER: "{{.CLUSTER}}"
    vars:
      MODE: '{{.MODE | default "auto"}}'
      IP_ADDRS:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  upgrade-cluster:
    desc: Upgrade Talos across the whole CLUSTER [CLUSTER=main]
    cmds:
      - for: { var: IP_ADDRS }
        task: upgrade-node
        vars:
          IP: "{{.ITEM}}"
          CLUSTER: "{{.CLUSTER}}"
    vars:
      IP_ADDRS:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  reboot-cluster:
    desc: Reboot Talos on a single node [CLUSTER=main] [IP=required] [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: reboot-node
        vars:
          IP: "{{.ITEM}}"
          MODE: "{{.MODE}}"
          CLUSTER: "{{.CLUSTER}}"
    vars:
      IP_ADDRS:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmd: helmfile --quiet --kube-context {{.CLUSTER}} --file {{.CLUSTER_DIR}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
    requires:
      vars: ["CLUSTER"]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info >/dev/null 2>&1
      - test -f {{.CLUSTER_DIR}}/bootstrap/helmfile.yaml
