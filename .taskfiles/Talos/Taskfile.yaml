---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply-node:
    desc: Apply Talos config to a node [IP=required]
    dotenv: ["{{.TALOS_DIR}}/talos.env"]
    cmd: >
      minijinja-cli {{.TALOS_DIR}}/machineconfig.yaml.j2 | op inject \
        | talosctl --nodes {{.IP}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/nodes/{{.IP}}.yaml \
          --file /dev/stdin {{if .INSECURE}}--insecure{{end}}
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE: '{{.INSECURE }}'
    requires:
      vars: [IP]
    preconditions:
      - test -f {{.TALOS_DIR}}/talos.env
      - test -f {{.TALOS_DIR}}/machineconfig.yaml.j2
      - test -f {{.TALOS_DIR}}/nodes/{{.IP}}.yaml
      - test -f {{.TALOS_DIR}}/talosconfig
      - which minijinja-cli talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    cmd: talosctl --nodes {{.NODE}} upgrade --image={{.TALOS_IMAGE}} --timeout=10m
    vars:
      MACHINE_TYPE:
        sh: talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}'
      TALOS_IMAGE:
        sh: |-
          talosctl --nodes {{.NODE}} get machineconfig --output=jsonpath='{.spec}' \
            | yq '.machine.install.image | select(. != null)'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which minijinja-cli talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster [VERSION=required]
    dotenv: ["{{.TALOS_DIR}}/talos.env"]
    cmds:
      - talosctl --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
      - talosctl health --wait-timeout=10m --server=false
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/$KUBERNETES_VERSION
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig
      - talosctl config info
      - test -f {{.TALOS_DIR}}/talos.env
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [IP=required]
    prompt: Reset Talos node '{{.IP}}' ... continue?
    cmd: talosctl reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - talosctl config info
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset Talos  ... continue?
    cmd: talosctl reset --nodes {{.IP_ADDRS}} --graceful=false
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - talosctl config info
      - which jq talosctl

  apply-cluster:
    desc: Apply Talos config across the whole cluster [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: apply-node
        vars:
          IP: "{{.ITEM}}"
          MODE: "{{.MODE}}"
    vars:
      MODE: '{{.MODE | default "auto"}}'
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster
    cmds:
      - for: { var: IP_ADDRS }
        task: upgrade-node
        vars:
          IP: "{{.ITEM}}"
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  reboot-cluster:
    desc: Reboot Talos on a single node [IP=required] [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: reboot-node
        vars:
          IP: "{{.ITEM}}"
          MODE: "{{.MODE}}"
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl
