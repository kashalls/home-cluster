---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 44.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_PROMETHEUS_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
          - name: "nodered"
            webhook_configs:
              - url: "http://node-red.${SECRET_DOMAIN}/power-outage"
                send_resolved: true
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "pushover"
              matchers:
                - severity = "critical"
              continue: true
            - receiver: "nodered"
              matchers:
                - alertname = "UPSOnBattery"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 2Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.20.30.6
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.20.30.6
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: true
      endpoints:
        - 10.20.30.6
    kubeEtcd:
      enabled: false
      endpoints:
        - 10.20.30.6
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    # Setting this option to 0 disabled CPU limits.
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.29.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        additionalScrapeConfigs:
          - job_name: "node-exporter"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${NAS_ADDR}:9100"
          - job_name: "minio-job"
            bearer_token: "${SECRET_MINIO_PROMETHEUS_BEARER}"
            honor_timestamps: true
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets:
                  - "${NAS_ADDR}:9000"
          - job_name: "coredns"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${COREDNS_ADDR}:9153"
          - job_name: "airgradient"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${AIRGRADIENT_ADDR}:9926"
          - job_name: "pve"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "10.20.30.5" # Nezuko
            metrics_path: /pve
            params:
              module: [default]
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: "pve-exporter.monitoring.svc.cluster.local:9221"
          - job_name: mqtt-exporter
            static_configs:
              - targets: ["mqtt-exporter.monitoring.svc.cluster.local:9000"]
            metric_relabel_configs:
              - source_labels: [sensor]
                regex: 'zigbee2mqtt_(.*)'
                replacement: '$1'
                target_label: sensor
          - job_name: 'homeassistant'
            scrape_interval: 60s
            metrics_path: /api/prometheus
            bearer_token: ${HASS_PROMETHEUS_TOKEN}
            static_configs:
              - targets:
                  - "hass.${SECRET_DOMAIN}"
