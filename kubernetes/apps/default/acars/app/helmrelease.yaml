---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app acars
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      acars-decoder:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          nodeSelector:
            rtlamr.feature.node.kubernetes.io/rtlamr: "true"
        containers:
          acars-decoder:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: KASHUWU-ACARS-1
              TZ: Etc/UTC
              SOAPYSDR: driver=rtlsdr,serial=00000001
              FREQUENCIES: "130.025;130.450;131.550;131.725"
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              # FREQUENCIES: >-
              #   130.025;130.425;130.450;130.825;130.850;131.125;131.425;
              #   131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acars-router
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            securityContext:
              privileged: true
            resources:
              requests:
                cpu: 150m
                memory: 64Mi
              limits:
                cpu: 200m
                memory: 128Mi
      acars-router:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          acars-router:
            image:
              repository: ghcr.io/sdr-enthusiasts/acars_router
              tag: 1.3.1_linux_amd64
            env:
              TZ: Etc/UTC
              AR_RECV_ZMQ_VDLM2: acars-acars-hub:45555
            envFrom:
              - secretRef:
                  name: acars-secret
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 96Mi
      acars-hub:
        containers:
          acars-hub:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarshub
              tag: v3.8.0Build1379_nohealthcheck
            env:
              TZ: Etc/UTC
              ENABLE_ADSB: "false"
              ENABLE_ACARS: external
              # ENABLE_VDLM: external
              QUIET_MESSAGES: "false" # This logs the messages themselves
            resources:
              requests:
                cpu: 300m
                memory: 192Mi
              limits:
                memory: 256Mi
    service:
      acars-router:
        controller: acars-router
        ports:
          router:
            port: 5550
      acars-hub:
        controller: acars-hub
        ports:
          http:
            port: &port 80
          acarsinput:
            port: 5550
            protocol: UDP
          vdslinput:
            port: 5555
            protocol: UDP
          acarsoutput:
            port: 15550
          vdsloutput:
            port: 15555
    route:
      app:
        hostnames: ["{{ .Release.Name }}.ok8.sh"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: acars-router
                port: *port
    persistence:
      usb:
        type: hostPath
        hostPath: /dev/bus/usb
        advancedMounts:
          acars-decoder:
            acars-decoder:
              - path: /dev/bus/usb
      acars-hub:
        type: persistentVolumeClaim
        storageClass: openebs-hostpath
        size: 2G
        accessMode: ReadWriteOnce
        advancedMounts:
          acars-hub:
            acars-hub:
              - path: /run/acars
